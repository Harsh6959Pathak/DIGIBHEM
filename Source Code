import java.util.Random;
import java.util.Scanner;
import java.util.InputMismatchException;


public class TicTacToeAgainstComputer {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        char[][] board = {
                {' ', ' ', ' '},
                {' ', ' ', ' '},
                {' ', ' ', ' '}
        };
        char player = 'X';
        char computer = 'O';

        System.out.println("Welcome to Tic Tac Toe against the computer!");

        while (true) {
            printBoard(board);
            if (player == 'X') {
                getPlayerMove(board, player, scanner);
            } else {
                getComputerMove(board, computer);
            }

            if (hasPlayerWon(board, player)) {
                printBoard(board);
                System.out.println("You win!");
                break;
            } else if (hasPlayerWon(board, computer)) {
                printBoard(board);
                System.out.println("Computer wins!");
                break;
            } else if (isBoardFull(board)) {
                printBoard(board);
                System.out.println("It's a draw!");
                break;
            }

            player = (player == 'X') ? 'O' : 'X';
        }

        scanner.close();
    }

    public static void printBoard(char[][] board) {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                System.out.print(board[row][col]);
                if (col < 2) {
                    System.out.print(" | ");
                }
            }
            System.out.println();
            if (row < 2) {
                System.out.println("---------");
            }
        }
    }

    public static void getPlayerMove(char[][] board, char player, Scanner scanner) {
        int row, col;
        do {
            System.out.print("Enter your move (row and column): ");
            try {
                row = scanner.nextInt() - 1; // Subtract 1 to convert to valid index
                col = scanner.nextInt() - 1; // Subtract 1 to convert to valid index
                if (isValidMove(board, row, col)) {
                    System.out.println("Invalid move. Try again.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter valid row and column.");
                scanner.nextLine(); // Clear the input buffer
                row = -1; // Set to an invalid value to loop again
                col = -1;
            }
        } while (row < 0 || col < 0);
        board[row][col] = player;
    }


    public static void getComputerMove(char[][] board, char computer) {
        Random random = new Random();
        int row, col;
        do {
            row = random.nextInt(3);
            col = random.nextInt(3);
        } while (isValidMove(board, row, col));
        board[row][col] = computer;
    }

    public static boolean isValidMove(char[][] board, int row, int col) {
        return row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ';
    }

    public static boolean hasPlayerWon(char[][] board, char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true;
            }
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        return board[0][2] == player && board[1][1] == player && board[2][0] == player;
    }

    public static boolean isBoardFull(char[][] board) {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (board[row][col] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }
}
